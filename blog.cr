# I don't have the time atm to make this myself
require "markd"

class Blog
    def self.regenerate() : Nil
        markdown = Dir.open "./md"
        posts = "./gen/posts"
        blog = File.open "./gen/blog.html", "w"

        blog.truncate
        blog.puts "<!--Occasionally generated by blog.cr, edit the generator instead of this file-->"

        markdown.each_child do |file|
            path = posts + "/" + file.lchop(markdown.path).rchop(".md") + ".html"
            new = false

            if !File.exists? path
                new = true
                File.touch path

                puts "[ BLOG ] " + Time.utc.to_s + ": New markdown, creating file at " + path
            end

            html = File.open path, "w"
            md = File.open markdown.path + "/" + file

            if !new || html.info.modification_time <= md.info.modification_time
                next
            end

            puts "[ BLOG ] " + Time.utc.to_s + ": HTML is stale or empty, regenerating " + path

            html.truncate
            html.puts "<!--Occasionally generated by blog.cr, edit the generator instead of this file-->\n"
            html.puts Markd.to_html(md.gets_to_end)

            blog.puts "<a href=\"/" + file.lchop(markdown.path).rchop(".md") + "\">???</a>"

            md.close
            html.close
        end

        puts "[ BLOG ] " + Time.utc.to_s + ": Blog pages and static file finished"

        markdown.close
        blog.close
    end
end